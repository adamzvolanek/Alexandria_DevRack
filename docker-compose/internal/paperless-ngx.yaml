# Docker Compose file for running paperless from the docker container registry.
# This file contains everything paperless needs to run.
# Paperless supports amd64, arm and arm64 hardware.
#
# All compose files of paperless configure paperless in the following way:
#
# - Paperless is (re)started on system boot, if it was running before shutdown.
# - Docker volumes for storing data are managed by Docker.
# - Folders for importing and exporting files are created in the same directory
#   as this file and mounted to the correct folders inside the container.
# - Paperless listens on port 8000.
#
# In addition to that, this Docker Compose file adds the following optional
# configurations:
#
# - Instead of SQLite (default), PostgreSQL is used as the database server.
# - Apache Tika and Gotenberg servers are started with paperless and paperless
#   is configured to use these services. These provide support for consuming
#   Office documents (Word, Excel, Power Point and their LibreOffice counter-
#   parts.
#
# To install and update paperless with this file, do the following:
#
# - Copy this file as 'docker-compose.yml' and the files 'docker-compose.env'
#   and '.env' into a folder.
# - Run 'docker compose pull'.
# - Run 'docker compose run --rm webserver createsuperuser' to create a user.
# - Run 'docker compose up -d'.
#
# For more extensive installation and update instructions, refer to the
# documentation.

services:
  broker:
    container_name: paperless_redis
    image: docker.io/library/redis:7
    networks:
      - proxy
    env_file:
      - ../server.env
    volumes:
      -  /mnt/user/appdata/internal/paperless-ngx/redisdata:/data
    restart: unless-stopped

  db:
    container_name: paperless_postgres
    image: docker.io/library/postgres:16
    networks:
      - proxy
    env_file:
      - ../server.env
    volumes:
      - /mnt/user/appdata/internal/paperless-ngx/pgdata:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    restart: unless-stopped

  webserver:
    container_name: paperless_ngx
    image: ghcr.io/paperless-ngx/paperless-ngx:latest
    networks:
      - proxy
    env_file:
      - ../server.env
      - ./paperless-ngx.env
    depends_on:
      - db
      - broker
      - gotenberg
      - tika
    ports:
      - "${SERVER_IP}:8138:8138"
    volumes:
      - /mnt/user/appdata/internal/paperless-ngx/data:/usr/src/paperless/data
      - /mnt/user/appdata/internal/paperless-ngx/media:/usr/src/paperless/media
      - /mnt/user/appdata/internal/paperless-ngx/export:/usr/src/paperless/export
      - /mnt/user/backups/Adam/Documents:/usr/src/paperless/consume
    environment:
      USERMAP_UID: ${USERMAP_UID}
      USERMAP_GID: ${USERMAP_GID}
      PAPERLESS_TIME_ZONE: ${PAPERLESS_TIME_ZONE}
      PAPERLESS_REDIS: redis://broker:6379
      PAPERLESS_DBHOST: db
      PAPERLESS_TIKA_ENABLED: 1
      PAPERLESS_TIKA_GOTENBERG_ENDPOINT: http://gotenberg:3000
      PAPERLESS_TIKA_ENDPOINT: http://tika:9998
      PAPERLESS_DBNAME: ${DB_NAME}
      PAPERLESS_DBUSER: ${DB_USER}
      PAPERLESS_DBPASS: ${DB_PASSWORD}
      PAPERLESS_PORT: 8138
      PAPERLESS_ADMIN_USER: admin
      PAPERLESS_ADMIN_PASSWORD: admin
      PAPERLESS_CONSUMER_RECURSIVE: true
      PAPERLESS_OCR_LANGUAGES: ${PAPERLESS_OCR_LANGUAGES}
      PAPERLESS_OCR_LANGUAGE: ${PAPERLESS_OCR_LANGUAGE}
      PAPERLESS_TASK_WORKERS: 1 # 1 worker and 1 core
      PAPERLESS_LOGROTATE_MAX_BACKUPS: 10 # reduce number of log backups
    restart: unless-stopped

  gotenberg:
    image: docker.io/gotenberg/gotenberg:8.7
    container_name: paperless_gotenberg
    networks:
      - proxy
    # The gotenberg chromium route is used to convert .eml files. We do not
    # want to allow external content like tracking pixels or even javascript.
    command:
      - "gotenberg"
      - "--chromium-disable-javascript=true"
      - "--chromium-allow-list=file:///tmp/.*"
    volumes:
      - /mnt/user/appdata/internal/paperless-ngx/gotenberg:/gotenberg
    restart: unless-stopped

  tika:
    image: docker.io/apache/tika:latest
    container_name: paperless_tika
    networks:
      - proxy
    volumes:
      - /mnt/user/appdata/internal/paperless-ngx/tika:/tika
    restart: unless-stopped

networks:
  proxy:
    name: ${DOCKER_NETWORK}
    driver: bridge
    external: true
